if(length(TP)>0)
{
FDR=length(FP)/length(TP)
if(0.01-FDR>=0 & abs(0.01-FDR)<=abs(0.01-Results_FDR))
{
if(CIDS<-length(which(newTestData[,scorename]>=scores[k] & newTestData[,"TorD"]=="T")))
{
Results_FDR<-FDR
score_threshold<-scores[k]
CIDS<-length(which(newTestData[,scorename]>=scores[k] & newTestData[,"TorD"]=="T"))
}
}
}
}
Results_FDR
score_threshold
tar_candidate_id<-which(newTestData[,scorename]>=score_threshold & newTestData[,input$y]=="T")
tar_candidate_id<-which(newTestData[,scorename]>=score_threshold & newTestData[,"TorD"]=="T")
print(paste(paste("iteration ",iteration),": ", length(tar_candidate_id)))
print(paste(paste("iteration ","1"),": ", length(tar_candidate_id)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ndata
ndata[1,]
summary(ndata)
runApp()
summary(ndata)
runApp()
sink()
summary(Tdata)
summary(TrainData)
auc.error
auc.error
svm.fit=svm(TrainData[,input$y]~TrainData[,Xcorr],TrainData)
svm.fit=svm(TrainData[,input$y]~.,TrainData)
svm.fit
pred.prob<-predict(svm.fit,Tdata,probability=TRUE)
svm.fit=svm(formula = TrainData[, input$y] ~ ., data = TrainData, probability=TRUE, kernel="linear")
pred.prob<-predict(svm.fit,Tdata,probability=TRUE)
pred_1<-prediction(attr(pred.prob,"probabilities")[,1],Tdata$TorD)
perf<-performance(pred_1,"auc")
auc.error[i]<-as.numeric(as.character(unlist(perf@y.values[[1]])))
auc.error
svm.fit=svm(formula = TrainData[, input$y] ~ ., data = TrainData, probability=TRUE, kernel="linear",type="C")
pred.prob<-predict(svm.fit,Tdata,probability=TRUE)
pred_1<-prediction(attr(pred.prob,"probabilities")[,1],Tdata$TorD)
perf<-performance(pred_1,"auc")
auc.error[i]<-as.numeric(as.character(unlist(perf@y.values[[1]])))
{
t_testid<-which(t_fold==i,arr.ind=TRUE)
d_testid<-which(d_fold==i,arr.ind=TRUE)
Tdata<-rbind(x_tar[t_testid,],x_dec[d_testid,])
TrainData<-rbind(x_tar[-t_testid,],x_dec[-d_testid,])
set.seed(1)
svm.fit=svm(formula = TrainData[, input$y] ~ ., data = TrainData, probability=TRUE, kernel="linear")
pred.prob<-predict(svm.fit,Tdata,probability=TRUE)
pred_1<-prediction(attr(pred.prob,"probabilities")[,1],Tdata$TorD)
perf<-performance(pred_1,"auc")
auc.error[i]<-as.numeric(as.character(unlist(perf@y.values[[1]])))
}
auc.error
summary(Tdata)
Summary(TrainData)
summary(TrainData)
svm.fit=svm(formula = as.factor(TrainData[,input$y]) ~ ., data = TrainData, probability=TRUE, kernel="linear")
runApp()
runApp()
runApp()
runApp()
typeof(ndata[,2])
ndata[,2]
as.character(ndatap[,2])
ndata[,input$y]<-as.factor(as.character(ndata[,input$y]))
summary(ndata)
summary(ndata[,2])
typeof(ndata[,2])
is.factor(ndata[,2])
is.character(ndata[,2])
class(ndata)
class(ndata[1,])
typeof(ndata[,1])
typeof(ndata[,2])
class(ndta[,1])
class(ndata[,1])
class(ndata[,2])
svm.fit=svm(formula = TrainData$TorD ~ ., data = TrainData, probability=TRUE, kernel="linear")
pred.prob<-predict(svm.fit,Tdata,probability=TRUE)
pred_1<-prediction(attr(pred.prob,"probabilities")[,1],Tdata$TorD)
perf<-performance(pred_1,"auc")
auc.error[i]<-as.numeric(as.character(unlist(perf@y.values[[1]])))
auc.error
runApp()
c
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
IDs
IDs
CIDS
IDs
IDs[0]<-1
IDs
runApp()
IDs
IDs[0]
IDs[1]
IDs[2]
IDs[3]
IDs[1]<-CIDS
IDs
runApp()
runApp()
runApp()
IDs
runApp()
runApp()
length(tar_candidate_id)
sink()
length(tar_candidate_id)
IDs
IDs[1]
iteration
IDs[iteration+1]
IDs[iteration+1]<-length(tar_candidate_id)
IDs
barplot(IDs)
barplot(IDs, main="Identified PSMs", xlab="Model", ylab="# of identified PSMs")
barplot(IDs, main="Identified PSMs", names=IDs_name,xlab="Model", ylab="# of identified PSMs")
runApp()
n
n
n
n
runApp()
runApp()
sink()
IDs
IDs_name
IDs
print(IDs)
runApp()
runApp()
runApp()
test_psms <- read.delim("~/Documents/TIDD/data/PSM/test_psms.tsv")
View(test_psms)
tmp<-read.delim("~/Documents/TIDD/data/PSM/test_psms.tsv")
sample<-sample(tmp,30000, replace=FALSE)
sample<-sample(nrow(tmp),30000, replace=FALSE)
sub<-tmp[sample,]
write.table(newTestData,sprintf("data/PSM/%s_ModelFitting_iteration.tsv",strsplit(input$psm_feature_file,split=".")[1],sep="\t")
scorename<-colnames(newTestData)[ncol(newTestData)]
scores<-unique(round(newTestData[dec_id,scorename],3))
length(scores)
#tmpdata<-cbind(data$Xcorr,data$TorD)
Results_FDR<- -1000
score_threshold<-1000
CIDS<-0
for(k in 1:length(scores))
{
TP<-which(newTestData[,scorename]>=scores[k] & newTestData[,input$y]=="T")
FP<-which(newTestData[,scorename]>=scores[k] & newTestData[,input$y]=="D")
if(length(TP)>0)
{
FDR=length(FP)/length(TP)
if(0.01-FDR>=0 & abs(0.01-FDR)<=abs(0.01-Results_FDR))
{
if(CIDS<-length(which(newTestData[,scorename]>=scores[k] & newTestData[,input$y]=="T")))
{
Results_FDR<-FDR
score_threshold<-scores[k]
CIDS<-length(which(newTestData[,scorename]>=scores[k] & newTestData[,input$y]=="T"))
}
}
}
}
Results_FDR
score_threshold
tar_candidate_id<-which(newTestData[,scorename]>=score_threshold & newTestData[,input$y]=="T")
print(paste(paste("iteration ",iteration),": ", length(tar_candidate_id)))
IDs[(iteration+1)]<-length(tar_candidate_id)
IDs_name[(iteration+1)]<-paste0("Iter",iteration)
}
output$IDplot<-renderPlot({
barplot(IDs, main="Identified PSMs", names=IDs_name,xlab="Model", ylab="# of identified PSMs")
})
})
tmp<-read.delim("~/Documents/TIDD/data/PSM/test_psms.tsv")
sample<-sample(nrow(tmp),30000, replace=FALSE)
sub<-tmp[sample,]
write(sub, "data/PSM/sub.txt")
id<-sample(nrow(tmp),30000, replace=FALSE)
sub<-tmp[id,]
write(sub, "data/PSM/sub.txt")
write.csv(sub, "data/PSM/sub.txt")
runApp()
write.csv(sub, "data/PSM/sub.txt",sep="\t")
runApp()
id<-sample(nrow(tmp),(integer)nrow(tmp)/10, replace=FALSE)
sub<-tmp[id,]
write.csv(sub, "data/PSM/sub.txt",sep="\t")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
TDinfo<-rep(0,nrow(psms))
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
length(dec_id)
length(scores)
input$y
summary(ndata)
summary(ndata)
names(ndata)
names(ndta)
names(ndata)
a<-which(names(ndata)==input$y)
a
colnames(ndata)[a]<="TorD"
colnames(ndata)[a]<-"TorD"
colnames(ndata)[which(names(ndata)==input$y)]
colnames(ndata)[which(names(ndata)==input$y)] <-"TorD"
runApp()
summary(Tdata)
sink()
summary(Tdata)
summary(TrainData)
sink()
summary(TrainData)
runApp()
summary(TrainData)
sink()
summary(TrainData)
runApp()
summary(TrainData)
sink()
summary(TrainData)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
summary(psms_part)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$y
input$required_feature
cmd_tmp<-sprintf("java -jar JAVA/TIDD.jar -i %s -dir %s -id %s -dec %s -ft %s", psm,specdir,input$required_feature,input$dec_pre,input$frag_tol)
cmd_tmp
system(cmd_tmp)
tmp<-strplit(input$required_feature,",")
tmp<-stsrplit(input$required_feature,",")
tmp<-strsplit(input$required_feature,",")
tmp
tmp[[1]]
tmp[[1]][1]
tmp[[1]][3]
mgffileCol<-as.numeric(info[1])-1
info<-strsplit(input$required_feature,",")[[1]]
mgffileCol<-as.numeric(info[1])-1
chargeCol<-as.numeric(info[3])-1
peptideCol<-as.numeric(info[5])-1
psm_num_Col<-length(psms_part)-1
titleCol<-psm_num_Col+1
precursorMZ_Col<-psm_num_Col+3
#Xcorr Usage: java -jar xcorr.jar spectrumFile resultFile binWidth binOffset titleCol peptideCol precursorMZCol chargeCol mgffilenameCol header");
cmd2<-sprintf("java -jar JAVA/Xcorr_v2.jar %s %s 0.02 0.0 6 4 8 2 0 true",specdir,psm_feature)
/
psm_feature<-paste0('data/PSM/',strsplit(input$psmfile,".tsv")[1],'_Feature.tsv')
#Xcorr Usage: java -jar xcorr.jar spectrumFile resultFile binWidth binOffset titleCol peptideCol precursorMZCol chargeCol mgffilenameCol header");
cmd2<-sprintf("java -jar JAVA/Xcorr_v2.jar %s %s 0.02 0.0 6 4 8 2 0 true",specdir,psm_feature)
cmd2_tmp<-sprintf("java -jar JAVA/Xcorr_v2.jar %s %s 0.02 0.0 %s %s %s %s %s true",specdir,psm_feature,titleCol,peptideCol,precursorMZ_Col,chargeCol,mgffileCol)
cmd2
cmd2_tmp
#Xcorr Usage: java -jar xcorr.jar spectrumFile resultFile binWidth binOffset titleCol peptideCol precursorMZCol chargeCol mgffilenameCol header");
cmd2<-sprintf("java -jar JAVA/Xcorr_v2.jar %s %s 0.02 0.0 %s %s %s %s %s true",specdir,psm_feature,titleCol,peptideCol,precursorMZ_Col,chargeCol,mgffileCol)
system(cmd2,intern=TRUE)
psms<-read.delim(paste0('data/PSM/',input$psmfile))
runApp()
runApp()
index
n
choosed<-renderPrint(input$psmf)
choosed
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
index<-input$psmf
index<-as.charactor(input$psmf)
runApp()
runApp()
runApp()
index
index
typeof(index)
psms
psms
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
index
index
index
psms
psms[index]
is.null(psms)
!is.null(psms)
psms[index]
summary(psms[index])
b<-summary(psms[index])
b
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$check1
CalXcorr
Z
Xx
updateSelectInput(session=session, inputId = "y", choices=input$check1, selected=c("TorD"))
updateSelectInput(session=session, inputId = "y", choices=input$check1, selected=c("TorD"))
input$check1
runApp()
input$check1
input$check1
length(input$check1)
input$check1[length(input$check1)]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str_detect(input$check1,fixed("Charge",ignore_case=TRUE) )
match(input$check1,fixed("Charge",ignore_case=TRUE) )
a<-ignore.case(input$check1)
library(stringr)
str_detect(input$check1,fixed("Charge",ignore_case=TRUE) )
if("Charge" %in% input$check1)
{}
("Charge" %in% input$check1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.package("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
version
